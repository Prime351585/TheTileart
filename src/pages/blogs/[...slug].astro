---
// filepath: c:\Users\HARSH\OneDrive\Desktop\gullible-group\src\pages\blogs\[...slug].astro
import Layout from '../../layouts/Layout.astro';
import { getAllPosts } from '../../../graphql/blogs';
import { WP_USERNAME, WP_APP_PASSWORD, GRAPH_QL_LINK } from "astro:env/server";
import Image from 'astro/components/Image.astro';
import "../../styles/wordpress.css"
// This function is required for dynamic routes in static mode
export async function getStaticPaths() {
  try {
    // Fetch all posts to generate static paths
    const posts = await getAllPosts(GRAPH_QL_LINK, WP_USERNAME, WP_APP_PASSWORD);
    // console.log(posts)
    // Return array of paths with params and props
    return posts.map(post => ({
      params: { 
        slug: post.slug 
      },
      props: { 
        post,
        // Pre-fetch recent posts for each page to avoid duplicate API calls
        recentPosts: posts.slice(0, 3).filter(p => p.id !== post.id)
      }
    }));
  } catch (error) {
    console.error('Error generating static paths for blogs:', error);
    return [];
  }
}

// Get the props passed from getStaticPaths
const { post, recentPosts } = Astro.props;
const { slug } = Astro.params;

// If no post is found (shouldn't happen with proper getStaticPaths), redirect to 404
if (!post) {
  return Astro.redirect('/404');
}

// Format the post date
const date = post.date ? new Date(post.date) : null;
const formattedDate = date ? date.toLocaleDateString('en-US', { 
  year: 'numeric', 
  month: 'long', 
  day: 'numeric' 
}) : '';

// Get categories
const categories = post.categories?.edges.map(edge => edge.node) || [];

// Generate meta description from excerpt if not available
let metaDescription = '';
if(!post.metaDescription)
{
    if (post.excerpt) {
  // Strip HTML and limit to ~160 characters
  metaDescription = post.excerpt
  .replace(/<\/?[^>]+(>|$)/g, "") // Remove HTML tags
    .substring(0, 157).trim();
    
    // Add ellipsis if truncated
  if (metaDescription.length >= 157) {
      metaDescription += "...";
    }
}
}
metaDescription=post.metaDescription as string

// Function to strip HTML tags from text
function stripHtml(html: string) {
  return html.replace(/<\/?[^>]+(>|$)/g, "");
}

// Function to truncate text to a specific length
function truncateText(text: string, maxLength: number) {
  if (text.length <= maxLength) return text;
  return text.substr(0, maxLength) + '...';
}

// Extract a reading time estimate
const readingTime = (() => {
  const text = stripHtml(post.content || '');
  const wpm = 225; // Average adult reading speed (words per minute)
  const words = text.trim().split(/\s+/).length;
  const time = Math.ceil(words / wpm);
  return time < 1 ? 1 : time; // Minimum 1 minute
})();

// Prepare schema.org structured data for SEO
const structuredData = {
  "@context": "https://schema.org",
  "@type": "BlogPosting",
  "headline": post.title,
  "datePublished": post.date,
  "dateModified": post.date,
  "author": {
    "@type": "Organization",
    "name": "TileArt"
  },
  "publisher": {
    "@type": "Organization",
    "name": "TileArt",
    "logo": {
      "@type": "ImageObject",
      "url": "https://www.tileart.com/logo.jpg" // Replace with your actual logo URL
    }
  },
  "description": metaDescription,
  "mainEntityOfPage": {
    "@type": "WebPage",
    "@id": `https://www.tileart.com/blogs/${post.slug}` // Replace with your actual domain
  }
};

// Add image to structured data if available
if (post.featuredImage?.node?.sourceUrl) {
  structuredData.image = post.featuredImage.node.sourceUrl;
}
// console.log(metaDescription)
---

<Layout 
  title={`${post.title} | TileArt Blog`} 
  description={metaDescription}
>
  <!-- Schema.org structured data -->
  <script type="application/ld+json" set:html={JSON.stringify(structuredData)} />
  
  <!-- Hero Section with Featured Image -->
  <div class="relative bg-primary-50">
    {post.featuredImage?.node?.sourceUrl ? (
      <div class="w-full h-64 md:h-96 overflow-hidden">
        <Image 
          src={post.featuredImage.node.sourceUrl} 
          alt={post.featuredImage.node.altText || post.title}
          width={100}
          height={100}
          class="w-full h-full object-cover"
        />
      </div>
    ) : (
      <div class="w-full h-64 md:h-96 overflow-hidden bg-primary-100">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 h-full flex items-center justify-center">
          <h1 class="text-4xl md:text-5xl font-bold text-primary-900 text-center">
            {post.title}
          </h1>
        </div>
      </div>
    )}
  </div>

  <!-- Main Content Area -->
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
    <div class="flex flex-col lg:flex-row gap-12">
      <!-- Article Content -->
      <article class="lg:w-2/3">
        <!-- Title and Meta (shown if there was a featured image) -->
        {post.featuredImage?.node?.sourceUrl && (
          <header class="mb-8">
            <h1 class="text-4xl font-bold text-primary-900 mb-4">
              {post.title}
            </h1>
          </header>
        )}
        
        <!-- Meta Info -->
        <div class="flex flex-wrap items-center text-gray-600 mb-8 border-b border-gray-200 pb-6">
          <!-- Date -->
          {formattedDate && (
            <span class="flex items-center mr-6 mb-2">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1 text-primary-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 002 2z" />
              </svg>
              {formattedDate}
            </span>
          )}
          
          <!-- Reading Time -->
          <span class="flex items-center mr-6 mb-2">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1 text-primary-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
            {readingTime} min read
          </span>
          
          <!-- Categories -->
          {categories.length > 0 && (
            <div class="flex flex-wrap items-center mb-2">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1 text-primary-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z" />
              </svg>
              <div class="flex flex-wrap">
                {categories.map((category, index) => (
                  <>
                    <a href={`/blogs/category/${category.slug}`} class="text-primary-600 hover:text-primary-800">
                      {category.name}
                    </a>
                    {index < categories.length - 1 && <span class="mx-1">,</span>}
                  </>
                ))}
              </div>
            </div>
          )}
        </div>
        
        <!-- Article Content with WordPress Block Styling -->
        <div 
          class="wp-content-wrapper prose prose-lg max-w-none"
          set:html={post.content}
        />
        
        <!-- Social Sharing -->
        <div class="mt-12 pt-6 border-t border-gray-200">
          <h3 class="text-lg font-medium text-gray-900 mb-4">Share this article</h3>
          <div class="flex space-x-4">
            <a 
              href={`https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(`https://tileart.com/blogs/${post.slug}`)}`} 
              target="_blank" 
              rel="noopener noreferrer"
              class="text-gray-500 hover:text-blue-600 transition-colors"
              aria-label="Share on Facebook"
            >
              <svg class="h-6 w-6" fill="currentColor" viewBox="0 0 24 24">
                <path d="M18.77 7.46H14.5v-1.9c0-.9.6-1.1 1-1.1h3V.5h-4.33C10.24.5 9.5 3.44 9.5 5.32v2.15h-3v4h3v12h5v-12h3.85l.42-4z"/>
              </svg>
            </a>
            <a 
              href={`https://twitter.com/intent/tweet?url=${encodeURIComponent(`https://tileart.com/blogs/${post.slug}`)}&text=${encodeURIComponent(post.title)}`} 
              target="_blank" 
              rel="noopener noreferrer"
              class="text-gray-500 hover:text-blue-400 transition-colors"
              aria-label="Share on Twitter"
            >
              <svg class="h-6 w-6" fill="currentColor" viewBox="0 0 24 24">
                <path d="M23.44 4.83c-.8.37-1.5.38-2.22.02.93-.56.98-.96 1.32-2.02-.88.52-1.86.9-2.9 1.1-.82-.88-2-1.43-3.3-1.43-2.5 0-4.55 2.04-4.55 4.54 0 .36.03.7.1 1.04-3.77-.2-7.12-2-9.36-4.75-.4.67-.6 1.45-.6 2.3 0 1.56.8 2.95 2 3.77-.74-.03-1.44-.23-2.05-.57v.06c0 2.2 1.56 4.03 3.64 4.44-.67.2-1.37.2-2.06.08.58 1.8 2.26 3.12 4.25 3.16C5.78 18.1 3.37 18.74 1 18.46c2 1.3 4.4 2.04 6.97 2.04 8.35 0 12.92-6.92 12.92-12.93 0-.2 0-.4-.02-.6.9-.63 1.96-1.22 2.56-2.14z"/>
              </svg>
            </a>
            <a 
              href={`https://www.linkedin.com/shareArticle?mini=true&url=${encodeURIComponent(`https://tileart.com/blogs/${post.slug}`)}&title=${encodeURIComponent(post.title)}`} 
              target="_blank" 
              rel="noopener noreferrer"
              class="text-gray-500 hover:text-blue-700 transition-colors"
              aria-label="Share on LinkedIn"
            >
              <svg class="h-6 w-6" fill="currentColor" viewBox="0 0 24 24">
                <path d="M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.454C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.225 0z"/>
              </svg>
            </a>
            <a 
              href={`mailto:?subject=${encodeURIComponent(post.title)}&body=${encodeURIComponent(`Check out this article: https://tileart.com/blogs/${post.slug}`)}`} 
              class="text-gray-500 hover:text-red-500 transition-colors"
              aria-label="Share via Email"
            >
              <svg class="h-6 w-6" fill="currentColor" viewBox="0 0 24 24">
                <path d="M20 4H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 4l-8 5-8-5V6l8 5 8-5v2z"/>
              </svg>
            </a>
          </div>
        </div>
      </article>
      
      <!-- Sidebar -->
      <aside class="lg:w-1/3">
        <div class="sticky top-24 space-y-8">
          <!-- Author Information -->
          <div class="bg-gray-50 rounded-lg p-6">
            <h3 class="text-lg font-medium text-gray-900 mb-3">About TileArt</h3>
            <p class="text-gray-600 mb-4">
              TileArt designs and crafts beautiful, durable tiles for homes and businesses, combining artisanal techniques with modern design.
            </p>
            <a href="/about" class="text-primary-600 hover:text-primary-800 font-medium flex items-center">
              Learn more about us
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 ml-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14 5l7 7m0 0l-7 7m7-7H3" />
              </svg>
            </a>
          </div>
          
          <!-- Recent Posts -->
          <div class="bg-white border border-gray-200 rounded-lg p-6">
            <h3 class="text-lg font-medium text-gray-900 mb-4">Recent Articles</h3>
            <div class="space-y-4">
              {recentPosts
                .filter(recentPost => recentPost.id !== post.id) // Filter out current post
                .map(recentPost => {
                  // Clean excerpt
                  const cleanExcerpt = recentPost.excerpt ? stripHtml(recentPost.excerpt) : '';
                  const truncatedExcerpt = truncateText(cleanExcerpt, 80);
                  
                  return (
                    <div class="flex items-start space-x-4">
                      <div class="flex-shrink-0 w-16 h-16 rounded overflow-hidden">
                        {recentPost.featuredImage?.node?.sourceUrl ? (
                          <Image
                            src={recentPost.featuredImage.node.sourceUrl} 
                            alt={recentPost.featuredImage.node.altText || recentPost.title}
                            width={100}
                            height={100}
                            class="w-full h-full object-cover"
                          />
                        ) : (
                          <div class="w-full h-full bg-primary-100 flex items-center justify-center">
                            <span class="text-primary-500 text-xs">TileArt</span>
                          </div>
                        )}
                      </div>
                      <div>
                        <h4 class="text-base font-medium text-gray-900 line-clamp-1 mb-1">
                          <a href={`/blogs/${recentPost.slug}`} class="hover:text-primary-700 transition-colors">
                            {recentPost.title}
                          </a>
                        </h4>
                        <p class="text-sm text-gray-600 line-clamp-2">
                          {truncatedExcerpt}
                        </p>
                      </div>
                    </div>
                  );
                })}
            </div>
            <a href="/blogs" class="inline-block mt-4 text-primary-600 hover:text-primary-800 font-medium">
              View all articles
            </a>
          </div>
          
          <!-- Categories List -->
          {categories.length > 0 && (
            <div class="bg-white border border-gray-200 rounded-lg p-6">
              <h3 class="text-lg font-medium text-gray-900 mb-4">Categories</h3>
              <div class="flex flex-wrap gap-2">
                {categories.map(category => (
                  <a 
                    href={`/blogs/category/${category.slug}`} 
                    class="px-4 py-2 bg-gray-100 hover:bg-primary-50 text-gray-800 rounded-full transition-colors"
                  >
                    {category.name}
                  </a>
                ))}
              </div>
            </div>
          )}
          
          <!-- Call to Action -->
          <div class="bg-primary-800 text-white rounded-lg p-6">
            <h3 class="text-xl font-medium mb-3">Ready to transform your space?</h3>
            <p class="mb-4">
              Browse our collection of premium tiles or contact us for a personalized consultation.
            </p>
            <div class="flex space-x-3">
              <a 
                href="/products" 
                class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-primary-800 bg-white hover:bg-gray-100 transition-colors"
              >
                Shop Now
              </a>
              <a 
                href="/contact-us" 
                class="inline-flex items-center px-4 py-2 border border-white text-sm font-medium rounded-md text-white hover:bg-primary-700 transition-colors"
              >
                Contact Us
              </a>
            </div>
          </div>
        </div>
      </aside>
    </div>
  </div>
  
  <!-- Related Posts Section -->
  {recentPosts.length > 0 && (
    <section class="bg-gray-50 py-12 md:py-16">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <h2 class="text-3xl font-bold text-primary-900 mb-8 text-center">You might also like</h2>
        
        <div class="grid grid-cols-1 md:grid-cols-3 gap-8">
          {recentPosts
            .filter(recentPost => recentPost.id !== post.id)
            .slice(0, 3)
            .map(recentPost => {
              // Format date
              const recentDate = recentPost.date ? new Date(recentPost.date) : null;
              const recentFormattedDate = recentDate ? recentDate.toLocaleDateString('en-US', { 
                year: 'numeric', 
                month: 'long', 
                day: 'numeric' 
              }) : '';
              
              // Clean excerpt
              const cleanExcerpt = recentPost.excerpt ? stripHtml(recentPost.excerpt) : '';
              const truncatedExcerpt = truncateText(cleanExcerpt, 100);
              
              return (
                <article class="bg-white rounded-lg overflow-hidden shadow-sm hover:shadow-md transition-shadow duration-300 flex flex-col h-full">
                  <div class="relative h-48 overflow-hidden">
                    {recentPost.featuredImage?.node?.sourceUrl ? (
                      <Image
                        width={100}
                        height={100}
                        src={recentPost.featuredImage.node.sourceUrl} 
                        alt={recentPost.featuredImage.node.altText || recentPost.title}
                        class="w-full h-full object-cover transition-transform duration-500 hover:scale-105"
                      />
                    ) : (
                      <div class="w-full h-full bg-primary-100 flex items-center justify-center">
                        <span class="text-primary-500">TileArt</span>
                      </div>
                    )}
                  </div>
                  
                  <div class="p-6 flex flex-col flex-grow">
                    <h3 class="text-xl font-bold text-gray-900 mb-2 line-clamp-2">
                      <a href={`/blogs/${recentPost.slug}`} class="hover:text-primary-700 transition-colors">
                        {recentPost.title}
                      </a>
                    </h3>
                    
                    {recentFormattedDate && (
                      <div class="text-sm text-gray-500 mb-3 flex items-center">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                        </svg>
                        {recentFormattedDate}
                      </div>
                    )}
                    
                    <p class="text-gray-600 mb-4 flex-grow">
                      {truncatedExcerpt}
                    </p>
                    
                    <a 
                      href={`/blogs/${recentPost.slug}`} 
                      class="mt-auto inline-flex items-center font-medium text-primary-600 hover:text-primary-800 transition-colors"
                    >
                      Read more
                      <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 ml-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14 5l7 7m0 0l-7 7m7-7H3" />
                      </svg>
                    </a>
                  </div>
                </article>
              );
            })}
        </div>
      </div>
    </section>
  )}
  
  <!-- Newsletter Section -->
  <section class="bg-white py-12 md:py-16">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="bg-primary-50 rounded-lg shadow-md p-8 md:p-10">
        <div class="text-center max-w-3xl mx-auto">
          <h2 class="text-3xl font-bold text-primary-900 mb-4">Stay Updated</h2>
          <p class="text-gray-600 mb-8">
            Subscribe to our newsletter to receive the latest articles, design tips, and exclusive offers.
          </p>
          
          <form class="flex flex-col sm:flex-row gap-4">
            <input 
              type="email" 
              placeholder="Your email address" 
              class="flex-grow px-4 py-3 rounded-lg border border-gray-300 focus:ring-2 focus:ring-primary-600 focus:border-transparent"
              required
            />
            <button 
              type="submit" 
              class="bg-primary-600 hover:bg-primary-700 text-white font-medium py-3 px-6 rounded-lg transition-colors"
            >
              Subscribe
            </button>
          </form>
          
          <p class="text-xs text-gray-500 mt-4">
            We respect your privacy. Unsubscribe at any time.
          </p>
        </div>
      </div>
    </div>
  </section>
</Layout>

<style>
  
</style>